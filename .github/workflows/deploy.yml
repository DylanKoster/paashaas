on:
  push:
    branches:
      - main

env:
  DYNAMODB_MAX_CONN_ATTEMPTS: 30
  DYNAMODB_CONN_INTERVAL_SECONDS: 2
  API_MAX_CONN_ATTEMPTS: 30
  API_CONN_INTERVAL_SECONDS: 2
  CREATE_TABLES_PACKAGE_PATH: scripts/create_dynamodb_tables

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install & setup python
        uses: actions/setup-python@v3

      - name: Install & setup AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Build PaaS-HaaS
        run: cd paas-haas && sam build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sam-build
          path: paas-haas/.aws-sam/
          include-hidden-files: true
          retention-days: 1
          if-no-files-found: error

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: sam-build
          path: paas-haas/.aws-sam

      - name: Install & setup python
        uses: actions/setup-python@v3

      - name: Install & setup AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Launch local DynamoDB
        run: |
          docker run -p 8000:8000 amazon/dynamodb-local &

          attempts=0
          until curl -s http://localhost:8000/shell/ > /dev/null || [ $attempts -ge $DYNAMODB_MAX_CONN_ATTEMPTS ]; do
            echo "Waiting for DynamoDB to be up..."
            sleep $DYNAMODB_CONN_INTERVAL_SECONDS
            attempts=$((attempts + 1))
          done

          if [ $attempts -ge $DYNAMODB_MAX_CONN_ATTEMPTS ]; then
            echo "DynamoDB failed to start after $DYNAMODB_MAX_CONN_ATTEMPTS attempts"
            exit 1
          else
            echo "DynamoDB is up and running!"
          fi

          python -m pip install -r ${CREATE_TABLES_PACKAGE_PATH}/requirements.txt
          python ${CREATE_TABLES_PACKAGE_PATH}/create_dynamodb_tables.py

      - name: Run tests
        run: |
          cd paas-haas && sam local start-api > sam_api.log 2>&1 &

          attempts=0
          echo "Waiting for API to be up..."
          until curl -s http://localhost:3000/stores/ > /dev/null || [ $attempts -ge $API_MAX_CONN_ATTEMPTS ]; do
            sleep $API_CONN_INTERVAL_SECONDS
            attempts=$((attempts+1))
          done

          if [ $attempts -ge $API_MAX_CONN_ATTEMPTS ]; then
            echo "API failed to start after $API_MAX_CONN_ATTEMPTS attempts"
            exit 1
          else
            echo "The API is up and running!"
          fi

          python -m pip install -r tests/requirements.txt
          pytest tests/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: sam-build
          path: paas-haas/.aws-sam

      - name: Install & setup python
        uses: actions/setup-python@v3

      - name: Install & setup AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Deploy PaaS-HaaS
        run: cd paas-haas && sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --no-disable-rollback
