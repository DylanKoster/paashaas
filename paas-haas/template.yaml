AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Paas-Haas API

  API for creating, removing, and altering stores, items and orders with PaaS-HaaS.

Globals:
  Function:
    Timeout: 30

Resources:
  EmailIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: "notifications.paashaas@gmail.com"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !GetAtt ItemsTable.StreamArn
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: arn:aws:ses:eu-west-1:950654245778:identity/*

  storesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/stores/
      Handler: stores.lambda_handler
      Runtime: python3.13
      Layers:
        - !Ref sharedLayer
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StoresTable
      Events:
        getStores:
          Type: Api
          Properties:
            Path: /stores/{store_id}
            Method: get
        addStore:
          Type: Api
          Properties:
            Path: /stores
            Method: post
        alterStore:
          Type: Api
          Properties:
            Path: /stores/{store_id}
            Method: put

  itemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/items/
      Handler: items.lambda_handler
      Layers:
        - !Ref sharedLayer
      Runtime: python3.13
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
      Events:
        getAllItems:
          Type: Api
          Properties:
            Path: /stores/{store_id}/items
            Method: get
        getItem:
          Type: Api
          Properties:
            Path: /stores/{store_id}/items/{item_id}
            Method: get
        addItem:
          Type: Api
          Properties:
            Path: /stores/{store_id}/items
            Method: post
        alterItem:
          Type: Api
          Properties:
            Path: /stores/{store_id}/items/{item_id}
            Method: put

  ordersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/orders/
      Handler: orders.lambda_handler
      Layers:
        - !Ref sharedLayer
      Runtime: python3.13
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Events:
        getAllOrders:
          Type: Api
          Properties:
            Path: /stores/{store_id}/orders
            Method: get
        getOrder:
          Type: Api
          Properties:
            Path: /stores/{store_id}/orders/{order_id}
            Method: get
        addOrder:
          Type: Api
          Properties:
            Path: /stores/{store_id}/orders
            Method: post
        alterOrder:
          Type: Api
          Properties:
            Path: /stores/{store_id}/orders/{order_id}
            Method: put

  notificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - SESCrusPolicy:
          IdentityName: "dylankoster40@gmail.com"
      CodeUri: lambda/notifications/
      Handler: notifications.lambda_handler
      Layers:
        - !Ref sharedLayer
      Runtime: python3.13
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SES_EMAIL_FROM: "dylankoster40@example.com"

  sharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sharedLayer
      Description: Shared Python module
      ContentUri: lambda/shared/
      CompatibleRuntimes:
        - python3.13

  StoresTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Stores
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Items
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: store_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: store_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: "NEW_IMAGE"

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  EventSourceItemsTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      FilterCriteria:
        Filters:
          - Pattern: '{ "dynamodb" : { "NewImage" : { "quantity" : { "N": ["0.0", "0"] } } } }'
      EventSourceArn: !GetAtt ItemsTable.StreamArn
      FunctionName: !GetAtt notificationsFunction.Arn
      StartingPosition: LATEST

Outputs:
  NotificationsLambda:
    Description: "ARN of My Lambda Function"
    Value: !GetAtt notificationsFunction.Arn

  storesApi:
    Description: "API Gateway endpoint URL for Prod stage for stores function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/stores/"
  storesFunction:
    Description: "Stores Lambda Function ARN"
    Value: !GetAtt storesFunction.Arn
  storesIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt storesFunctionRole.Arn

  itemsApi:
    Description: "API Gateway endpoint URL for Prod stage for items function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/items/"
  itemsFunction:
    Description: "Items Lambda Function ARN"
    Value: !GetAtt itemsFunction.Arn
  itemsIamRole:
    Description: "Implicit IAM Role created for the items function"
    Value: !GetAtt itemsFunctionRole.Arn

  ordersApi:
    Description: "API Gateway endpoint URL for Prod stage for orders function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/orders/"
  ordersFunction:
    Description: "Orders Lambda Function ARN"
    Value: !GetAtt ordersFunction.Arn
  ordersIamRole:
    Description: "Implicit IAM Role created for the orders function"
    Value: !GetAtt ordersFunctionRole.Arn
